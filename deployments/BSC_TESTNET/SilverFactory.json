{
  "address": "0xD1DfeC22D2577aE722b8ed3b5B05472e3479FA26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_PAIR_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auro",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "disableMetaTxnsPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        }
      ],
      "name": "enableMetaTxnsPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_auro",
          "type": "address"
        }
      ],
      "name": "setAuroAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ed02c71653f29961e229cf3dc242cfbfa20875fdab4595d6f6050e752a7be45",
  "receipt": {
    "to": null,
    "from": "0x5A22F88c7425BF644803749b201Cc9a8b03B73Bc",
    "contractAddress": "0xD1DfeC22D2577aE722b8ed3b5B05472e3479FA26",
    "transactionIndex": 0,
    "gasUsed": "3074151",
    "logsBloom": "0x
    "blockHash": "0x43e73dac67afd837bfe4556950c00fd70a9a4305fc7d9f6d1f419302bb001efb",
    "transactionHash": "0x1ed02c71653f29961e229cf3dc242cfbfa20875fdab4595d6f6050e752a7be45",
    "logs": [],
    "blockNumber": 14267114,
    "cumulativeGasUsed": "3074151",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5A22F88c7425BF644803749b201Cc9a8b03B73Bc"
  ],
  "solcInputHash": "dc2a7c4e5d2addec3ebec8af3f90f325",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_PAIR_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"disableMetaTxnsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"enableMetaTxnsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auro\",\"type\":\"address\"}],\"name\":\"setAuroAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswapv2/SilverFactory.sol\":\"SilverFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/uniswapv2/SilverERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\nimport './libraries/SafeMath.sol';\\n\\ncontract SilverERC20 {\\n    using SafeMathSilver for uint;\\n\\n    string public constant name = 'Silver LP Token';\\n    string public constant symbol = 'SLP';\\n    uint8 public constant decimals = 18;\\n    uint  public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    address private _trustedForwarder; // remember to change before deploying\\n\\n    // Control support for EIP-2771 Meta Transactions\\n    bool public metaTxnsEnabled = false;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event MetaTxnsEnabled(address indexed caller);\\n    event MetaTxnsDisabled(address indexed caller);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return metaTxnsEnabled && forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external returns (bool) {\\n        _approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external returns (bool) {\\n        _transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool) {\\n        if (allowance[from][_msgSender()] != uint(-1)) {\\n            allowance[from][_msgSender()] = allowance[from][_msgSender()].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'Silver: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Silver: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xe6de022110ee495bbed35ae281a5edce36d69d0da9017c05f79aa0ea9a37b86a\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/SilverFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\nimport './interfaces/ISilverFactory.sol';\\nimport './SilverPair.sol';\\n\\ncontract SilverFactory is ISilverFactory {\\n    bytes32 public constant INIT_CODE_PAIR_HASH = keccak256(abi.encodePacked(type(SilverPair).creationCode));\\n\\n    address public override feeTo;\\n    address public override feeToSetter;\\n    address public override migrator;\\n    address public override auro;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _feeToSetter) public {\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function allPairsLength() external override view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'Silver: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'Silver: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'Silver: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = type(SilverPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        SilverPair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override {\\n        require(msg.sender == feeToSetter, 'Silver: FORBIDDEN');\\n        feeTo = _feeTo;\\n    }\\n\\n    function setMigrator(address _migrator) external override {\\n        require(msg.sender == feeToSetter, 'Silver: FORBIDDEN');\\n        migrator = _migrator;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external override {\\n        require(msg.sender == feeToSetter, 'Silver: FORBIDDEN');\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    \\n    function setAuroAddress(address _auro) external override {\\n        require(msg.sender == feeToSetter, 'Silver: FORBIDDEN');\\n        require(_auro != address(0), 'Silver: INVALID_ADDRESS');\\n        auro = _auro;\\n    }\\n\\n\\n\\n    function enableMetaTxnsPair(address pairAddress) external {\\n        require(msg.sender == feeToSetter, 'Silver: FORBIDDEN');\\n        require(pairAddress != address(0), 'Silver: PAIR_NOT_EXISTS');\\n\\n        SilverPair pair = SilverPair(pairAddress);\\n\\n        require(!pair.metaTxnsEnabled(), 'Silver: META_TXNS_ALREADY_ENABLED');\\n\\n        pair.enableMetaTxns();\\n    }\\n\\n    function disableMetaTxnsPair(address pairAddress) external {\\n        require(msg.sender == feeToSetter, 'Silver: FORBIDDEN');\\n        require(pairAddress != address(0), 'Silver: PAIR_NOT_EXISTS');\\n\\n        SilverPair pair = SilverPair(pairAddress);\\n\\n        require(pair.metaTxnsEnabled(), 'Silver: META_TXNS_ALREADY_DISABLED');\\n\\n        pair.disableMetaTxns();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbe54e3ff10554da6c6387a6bc98378fcfaacc7940cc4d09a7faac7416b9a7f84\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/SilverPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\nimport './SilverERC20.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/UQ112x112.sol';\\nimport './interfaces/IERC20.sol';\\nimport './interfaces/ISilverFactory.sol';\\nimport './interfaces/ISilverCallee.sol';\\n\\ninterface IMigrator {\\n    // Return the desired amount of liquidity token that the migrator wants.\\n    function desiredLiquidity() external view returns (uint256);\\n}\\n\\ncontract SilverPair is SilverERC20 {\\n    using SafeMathSilver for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    struct SwapVariables {\\n        uint112 _reserve0;\\n        uint112 _reserve1;\\n        uint balance0;\\n        uint balance1;\\n        uint amount0In;\\n        uint amount1In;\\n        uint fee;\\n    }\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'Silver: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'Silver: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor() public {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external {\\n        require(msg.sender == factory, 'Silver: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'Silver: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = ISilverFactory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20Silver(token0).balanceOf(address(this));\\n        uint balance1 = IERC20Silver(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            address migrator = ISilverFactory(factory).migrator();\\n            if (_msgSender() == migrator) {\\n                liquidity = IMigrator(migrator).desiredLiquidity();\\n                require(liquidity > 0 && liquidity != uint256(-1), \\\"Bad desired liquidity\\\");\\n            } else {\\n                require(migrator == address(0), \\\"Must not have migrator\\\");\\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n            }\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, 'Silver: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(_msgSender(), amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20Silver(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20Silver(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'Silver: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20Silver(_token0).balanceOf(address(this));\\n        balance1 = IERC20Silver(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(_msgSender(), amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'Silver: INSUFFICIENT_OUTPUT_AMOUNT');\\n        SwapVariables memory vars = SwapVariables(0, 0, 0, 0, 0, 0, 0);\\n        (vars._reserve0, vars._reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < vars._reserve0 && amount1Out < vars._reserve1, 'Silver: INSUFFICIENT_LIQUIDITY');\\n\\n        vars.fee = 25;\\n\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'Silver: INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) ISilverCallee(to).uniswapV2Call(_msgSender(), amount0Out, amount1Out, data);\\n            vars.balance0 = IERC20Silver(_token0).balanceOf(address(this));\\n            vars.balance1 = IERC20Silver(_token1).balanceOf(address(this));\\n        }\\n        vars.amount0In = vars.balance0 > vars._reserve0 - amount0Out ? vars.balance0 - (vars._reserve0 - amount0Out) : 0;\\n        vars.amount1In = vars.balance1 > vars._reserve1 - amount1Out ? vars.balance1 - (vars._reserve1 - amount1Out) : 0;\\n        require(vars.amount0In > 0 || vars.amount1In > 0, 'Silver: INSUFFICIENT_INPUT_AMOUNT');\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint balance0Adjusted = vars.balance0.mul(10000).sub(vars.amount0In.mul(vars.fee));\\n            uint balance1Adjusted = vars.balance1.mul(10000).sub(vars.amount1In.mul(vars.fee));\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(vars._reserve0).mul(vars._reserve1).mul(10000**2), 'Silver: K');\\n        }\\n\\n        _update(vars.balance0, vars.balance1, vars._reserve0, vars._reserve1);\\n        emit Swap(_msgSender(), vars.amount0In, vars.amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20Silver(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20Silver(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20Silver(token0).balanceOf(address(this)), IERC20Silver(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    function disableMetaTxns() external {\\n        require(_msgSender() == factory, 'Silver: FORBIDDEN');\\n        require(metaTxnsEnabled, \\\"Silver: META_TXNS_ALREADY_DISABLED\\\");\\n\\n        metaTxnsEnabled = false;\\n\\n        emit MetaTxnsDisabled(_msgSender());\\n    }\\n\\n    function enableMetaTxns() external {\\n        require(_msgSender() == factory, 'Silver: FORBIDDEN');\\n        require(!metaTxnsEnabled, \\\"Silver: META_TXNS_ALREADY_ENABLED\\\");\\n\\n        metaTxnsEnabled = true;\\n\\n        emit MetaTxnsEnabled(_msgSender());\\n    }\\n}\",\"keccak256\":\"0x3f140253e18bd3acbf4b5333efa40ef404584dea2e467bda52f5b2a509bf80ae\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\ninterface IERC20Silver {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1e1b24a55731046779dec6ab649cce3208a83d4f6cbfcc84f478ba9d23ddf1f7\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISilverCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\ninterface ISilverCallee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x184e4222302c5b2f9b27d2ad0b5a30d7b744cb1e7744f99b7d86f2f6d1603c5c\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/ISilverFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\ninterface ISilverFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n    function auro() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n    function setAuroAddress(address) external;\\n}\\n\",\"keccak256\":\"0x42481aa1205b94adfd45a8976ad3c6b36350cca814e5e51c36983ec45a0f2d27\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e34228558f68066644fac4777301ec63326ef49a21672ae0eb63dc6d0bc3206\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathSilver {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\\n\",\"keccak256\":\"0x7e9b9084bc0ba4db9a373acbeca74b2501ac9f98b824efda84e2e9c267ac4fdd\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.6.12;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x52d3d3e3062b8110ac1f3841ace3279071f8b01885e98d34582ca0093e5059e4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161369f38038061369f8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b0390921691909117905561363c806100636000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635e07d17b11610097578063b0cb33fe11610066578063b0cb33fe1461020f578063c9c6539614610235578063e6a4390514610263578063f46901ed14610291576100f5565b80635e07d17b146101955780636bd7c172146101bb5780637cd07e47146101e1578063a2e74af6146101e9576100f5565b806321dd70e6116100d357806321dd70e61461014357806323cf31181461014b578063574f2ba3146101735780635855a25a1461018d576100f5565b8063017e7e58146100fa578063094b74151461011e5780631e3dd18b14610126575b600080fd5b6101026102b7565b604080516001600160a01b039092168252519081900360200190f35b6101026102c6565b6101026004803603602081101561013c57600080fd5b50356102d5565b6101026102fc565b6101716004803603602081101561016157600080fd5b50356001600160a01b031661030b565b005b61017b610380565b60408051918252519081900360200190f35b61017b610386565b610171600480360360208110156101ab57600080fd5b50356001600160a01b0316610419565b610171600480360360208110156101d157600080fd5b50356001600160a01b03166105be565b61010261068e565b610171600480360360208110156101ff57600080fd5b50356001600160a01b031661069d565b6101716004803603602081101561022557600080fd5b50356001600160a01b0316610712565b6101026004803603604081101561024b57600080fd5b506001600160a01b038135811691602001351661089a565b6101026004803603604081101561027957600080fd5b506001600160a01b0381358116916020013516610bb9565b610171600480360360208110156102a757600080fd5b50356001600160a01b0316610bdf565b6000546001600160a01b031681565b6001546001600160a01b031681565b600581815481106102e257fe5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031681565b6001546001600160a01b0316331461035e576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60055490565b60405161039560208201610c54565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106103db5780518252601f1990920191602091820191016103bc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6001546001600160a01b0316331461046c576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b6001600160a01b0381166104c1576040805162461bcd60e51b815260206004820152601760248201527653696c7665723a20504149525f4e4f545f45584953545360481b604482015290519081900360640190fd5b6000819050806001600160a01b031663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ff57600080fd5b505afa158015610513573d6000803e3d6000fd5b505050506040513d602081101561052957600080fd5b5051156105675760405162461bcd60e51b81526004018080602001828103825260218152602001806135c46021913960400191505060405180910390fd5b806001600160a01b031663578bb42d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314610611576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b6001600160a01b03811661066c576040805162461bcd60e51b815260206004820152601760248201527f53696c7665723a20494e56414c49445f41444452455353000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6001546001600160a01b031633146106f0576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610765576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b6001600160a01b0381166107ba576040805162461bcd60e51b815260206004820152601760248201527653696c7665723a20504149525f4e4f545f45584953545360481b604482015290519081900360640190fd5b6000819050806001600160a01b031663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d602081101561082257600080fd5b505161085f5760405162461bcd60e51b81526004018080602001828103825260228152602001806135e56022913960400191505060405180910390fd5b806001600160a01b031663083836406040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105a257600080fd5b6000816001600160a01b0316836001600160a01b03161415610903576040805162461bcd60e51b815260206004820152601b60248201527f53696c7665723a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b031610610926578385610929565b84845b90925090506001600160a01b038216610980576040805162461bcd60e51b815260206004820152601460248201527353696c7665723a205a45524f5f4144445245535360601b604482015290519081900360640190fd5b6001600160a01b038281166000908152600460209081526040808320858516845290915290205416156109f0576040805162461bcd60e51b815260206004820152601360248201527253696c7665723a20504149525f45584953545360681b604482015290519081900360640190fd5b606060405180602001610a0290610c54565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610c32576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61296280610c628339019056fe60806040526005805460ff60a01b191690556001600d5534801561002257600080fd5b50604080518082018252600f81526e29b4b63b32b9102628102a37b5b2b760891b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fa02e41f8622e57e975c7ec39e69a0fe667ce44e62d3126dc8994889e0c7ee5bc818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556128488061011a6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a9059cbb116100a2578063d21220a711610071578063d21220a7146105ae578063d505accf146105b6578063dd62ed3e14610607578063fff6cae914610635576101e5565b8063a9059cbb1461054c578063ba9a7a5614610578578063bc25cf7714610580578063c45a0155146105a6576101e5565b80637ecebe00116100de5780637ecebe00146104d757806389afcb44146104fd57806395d89b411461053c578063a8c95dc014610544576101e5565b80635a3d54931461047b5780636a6278421461048357806370a08231146104a95780637464fc3d146104cf576101e5565b806323b872dd11610187578063485cc95511610156578063485cc95514610417578063572b6c0514610445578063578bb42d1461046b5780635909c0d514610473576101e5565b806323b872dd146103b357806330adf81f146103e9578063313ce567146103f15780633644e5151461040f576101e5565b80630902f1ac116101c35780630902f1ac146102fd578063095ea7b3146103355780630dfe16811461037557806318160ddd14610399576101e5565b8063022c0d9f146101ea57806306fdde031461027857806308383640146102f5575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b50909250905061063d565b005b610280610c60565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ba5781810151838201526020016102a2565b50505050905090810190601f1680156102e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610276610c8b565b610305610d82565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103616004803603604081101561034b57600080fd5b506001600160a01b038135169060200135610dac565b604080519115158252519081900360200190f35b61037d610dca565b604080516001600160a01b039092168252519081900360200190f35b6103a1610dd9565b60408051918252519081900360200190f35b610361600480360360608110156103c957600080fd5b506001600160a01b03813581169160208101359091169060400135610ddf565b6103a1610ec2565b6103f9610ee6565b6040805160ff9092168252519081900360200190f35b6103a1610eeb565b6102766004803603604081101561042d57600080fd5b506001600160a01b0381358116916020013516610ef1565b6103616004803603602081101561045b57600080fd5b50356001600160a01b0316610f72565b610276610fa3565b6103a16110a1565b6103a16110a7565b6103a16004803603602081101561049957600080fd5b50356001600160a01b03166110ad565b6103a1600480360360208110156104bf57600080fd5b50356001600160a01b031661154c565b6103a161155e565b6103a1600480360360208110156104ed57600080fd5b50356001600160a01b0316611564565b6105236004803603602081101561051357600080fd5b50356001600160a01b0316611576565b6040805192835260208301919091528051918290030190f35b610280611919565b610361611938565b6103616004803603604081101561056257600080fd5b506001600160a01b038135169060200135611948565b6103a161195c565b6102766004803603602081101561059657600080fd5b50356001600160a01b0316611962565b61037d611ad1565b61037d611ae0565b610276600480360360e08110156105cc57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611aef565b6103a16004803603604081101561061d57600080fd5b506001600160a01b0381358116916020013516611cee565b610276611d0b565b600d54600114610685576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55841515806106985750600084115b6106d35760405162461bcd60e51b81526004018080602001828103825260228152602001806127686022913960400191505060405180910390fd5b6106db6126f3565b6040518060e0016040528060006001600160701b0316815260200160006001600160701b031681526020016000815260200160008152602001600081526020016000815260200160008152509050610731610d82565b506001600160701b0390811660208401521680825286108015610760575080602001516001600160701b031685105b6107b1576040805162461bcd60e51b815260206004820152601e60248201527f53696c7665723a20494e53554646494349454e545f4c49515549444954590000604482015290519081900360640190fd5b601960c08201526007546008546001600160a01b039182169190811690861682148015906107f15750806001600160a01b0316866001600160a01b031614155b610837576040805162461bcd60e51b815260206004820152601260248201527153696c7665723a20494e56414c49445f544f60701b604482015290519081900360640190fd5b87156108485761084882878a611e6a565b861561085957610859818789611e6a565b831561091257856001600160a01b03166310d1e85c610876612004565b8a8a89896040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b505160408085019190915280516370a0823160e01b815230600482015290516001600160a01b038316916370a08231916024808301926020929190829003018186803b1580156109d157600080fd5b505afa1580156109e5573d6000803e3d6000fd5b505050506040513d60208110156109fb57600080fd5b505160608401525050805160408201516001600160701b0390911687900310610a25576000610a3c565b8581600001516001600160701b0316038160400151035b8160800181815250508481602001516001600160701b031603816060015111610a66576000610a7d565b8481602001516001600160701b0316038160600151035b60a08201526080810151151580610a98575060008160a00151115b610ad35760405162461bcd60e51b81526004018080602001828103825260218152602001806127d06021913960400191505060405180910390fd5b6000610b0a610af38360c00151846080015161202990919063ffffffff16565b6040840151610b0490612710612029565b9061208c565b90506000610b3d610b2c8460c001518560a0015161202990919063ffffffff16565b6060850151610b0490612710612029565b9050610b7a6305f5e100610b7485602001516001600160701b031686600001516001600160701b031661202990919063ffffffff16565b90612029565b610b848383612029565b1015610bc3576040805162461bcd60e51b815260206004820152600960248201526853696c7665723a204b60b81b604482015290519081900360640190fd5b5050610be181604001518260600151836000015184602001516120dc565b836001600160a01b0316610bf3612004565b6001600160a01b03167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82283608001518460a001518a8a6040518085815260200184815260200183815260200182815260200194505050505060405180910390a350506001600d5550505050565b6040518060400160405280600f81526020016e29b4b63b32b9102628102a37b5b2b760891b81525081565b6006546001600160a01b0316610c9f612004565b6001600160a01b031614610cee576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600554600160a01b900460ff16610d365760405162461bcd60e51b81526004018080602001828103825260228152602001806127f16022913960400191505060405180910390fd5b6005805460ff60a01b19169055610d4b612004565b6001600160a01b03167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610dc0610db9612004565b8484612298565b5060015b92915050565b6007546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602052604081206000199082610e04612004565b6001600160a01b03166001600160a01b031681526020019081526020016000205414610ead576001600160a01b0384166000908152600260205260408120610e7191849190610e51612004565b6001600160a01b031681526020810191909152604001600020549061208c565b6001600160a01b038516600090815260026020526040812090610e92612004565b6001600160a01b031681526020810191909152604001600020555b610eb88484846122fa565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6006546001600160a01b03163314610f44576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055565b600554600090600160a01b900460ff168015610f9b57506005546001600160a01b038381169116145b90505b919050565b6006546001600160a01b0316610fb7612004565b6001600160a01b031614611006576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600554600160a01b900460ff161561104f5760405162461bcd60e51b81526004018080602001828103825260218152602001806127af6021913960400191505060405180910390fd5b6005805460ff60a01b1916600160a01b17905561106a612004565b6001600160a01b03167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b600a5481565b600b5481565b6000600d546001146110f7576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d81905580611107610d82565b50600754604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561115b57600080fd5b505afa15801561116f573d6000803e3d6000fd5b505050506040513d602081101561118557600080fd5b5051600854604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d602081101561120257600080fd5b50519050600061121b836001600160701b03871661208c565b90506000611232836001600160701b03871661208c565b9050600061124087876123a8565b600054909150806114275760065460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b15801561129057600080fd5b505afa1580156112a4573d6000803e3d6000fd5b505050506040513d60208110156112ba57600080fd5b505190506001600160a01b0381166112d0612004565b6001600160a01b031614156113a557806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561131857600080fd5b505afa15801561132c573d6000803e3d6000fd5b505050506040513d602081101561134257600080fd5b50519950891580159061135757506000198a14155b6113a0576040805162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b604482015290519081900360640190fd5b611421565b6001600160a01b038116156113fa576040805162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b604482015290519081900360640190fd5b6114126103e8610b0461140d8888612029565b6124e8565b995061142160006103e8612539565b5061146a565b6114676001600160701b03891661143e8684612029565b8161144557fe5b046001600160701b03891661145a8685612029565b8161146157fe5b046125c3565b98505b600089116114a95760405162461bcd60e51b815260040180806020018281038252602581526020018061278a6025913960400191505060405180910390fd5b6114b38a8a612539565b6114bf86868a8a6120dc565b81156114e9576009546114e5906001600160701b0380821691600160701b900416612029565b600c555b6114f1612004565b6001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d546001146115c1576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d819055806115d1610d82565b50600754600854604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561162d57600080fd5b505afa158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d60208110156116cf57600080fd5b5051306000908152600160205260408120549192506116ee88886123a8565b600054909150806116ff8487612029565b8161170657fe5b049a50806117148486612029565b8161171b57fe5b04995060008b11801561172e575060008a115b6117695760405162461bcd60e51b81526004018080602001828103825260258152602001806127436025913960400191505060405180910390fd5b61177330846125db565b61177e878d8d611e6a565b611789868d8c611e6a565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156117cf57600080fd5b505afa1580156117e3573d6000803e3d6000fd5b505050506040513d60208110156117f957600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561184557600080fd5b505afa158015611859573d6000803e3d6000fd5b505050506040513d602081101561186f57600080fd5b5051935061187f85858b8b6120dc565b81156118a9576009546118a5906001600160701b0380821691600160701b900416612029565b600c555b8b6001600160a01b03166118bb612004565b6001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b604051806040016040528060038152602001620534c560ec1b81525081565b600554600160a01b900460ff1681565b6000610dc0611955612004565b84846122fa565b6103e881565b600d546001146119aa576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600754600854600954604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611a539285928792611a4e926001600160701b03169185916370a0823191602480820192602092909190829003018186803b158015611a1c57600080fd5b505afa158015611a30573d6000803e3d6000fd5b505050506040513d6020811015611a4657600080fd5b50519061208c565b611e6a565b611ac78184611a4e6009600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a1c57600080fd5b50506001600d5550565b6006546001600160a01b031681565b6008546001600160a01b031681565b42841015611b36576040805162461bcd60e51b815260206004820152600f60248201526e14da5b1d995c8e8811561412549151608a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611c51573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c875750886001600160a01b0316816001600160a01b0316145b611cd8576040805162461bcd60e51b815260206004820152601960248201527f53696c7665723a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611ce3898989612298565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d54600114611d53576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600754604080516370a0823160e01b81523060048201529051611e63926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d6020811015611dce57600080fd5b5051600854604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e1b57600080fd5b505afa158015611e2f573d6000803e3d6000fd5b505050506040513d6020811015611e4557600080fd5b50516009546001600160701b0380821691600160701b9004166120dc565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611f175780518252601f199092019160209182019101611ef8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f79576040519150601f19603f3d011682016040523d82523d6000602084013e611f7e565b606091505b5091509150818015611fac575080511580611fac5750808060200190516020811015611fa957600080fd5b50515b611ffd576040805162461bcd60e51b815260206004820152601760248201527f53696c7665723a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600061200f33610f72565b15612023575060131936013560601c612026565b50335b90565b60008115806120445750508082028282828161204157fe5b04145b610dc4576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610dc4576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b0384118015906120fa57506001600160701b038311155b61213e576040805162461bcd60e51b815260206004820152601060248201526f53696c7665723a204f564552464c4f5760801b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b9004811682039081161580159061216e57506001600160701b03841615155b801561218257506001600160701b03831615155b156121ed578063ffffffff166121aa8561219b8661266d565b6001600160e01b03169061267f565b600a80546001600160e01b03929092169290920201905563ffffffff81166121d58461219b8761266d565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526001602052604090205461231d908261208c565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461234c90826126a4565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156123f957600080fd5b505afa15801561240d573d6000803e3d6000fd5b505050506040513d602081101561242357600080fd5b5051600c546001600160a01b0382161580159450919250906124d45780156124cf57600061246061140d6001600160701b03888116908816612029565b9050600061246d836124e8565b9050808211156124cc57600061248f612486848461208c565b60005490612029565b905060006124a8836124a2866005612029565b906126a4565b905060008183816124b557fe5b04905080156124c8576124c88782612539565b5050505b50505b6124e0565b80156124e0576000600c555b505092915050565b6000600382111561252b575080600160028204015b818110156125255780915060028182858161251457fe5b04018161251d57fe5b0490506124fd565b50610f9e565b8115610f9e57506001919050565b60005461254690826126a4565b60009081556001600160a01b03831681526001602052604090205461256b90826126a4565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106125d257816125d4565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546125fe908261208c565b6001600160a01b03831660009081526001602052604081209190915554612625908261208c565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161269c57fe5b049392505050565b80820182811015610dc4576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b6040518060e0016040528060006001600160701b0316815260200160006001600160701b031681526020016000815260200160008152602001600081526020016000815260200160008152509056fe53696c7665723a20494e53554646494349454e545f4c49515549444954595f4255524e454453696c7665723a20494e53554646494349454e545f4f55545055545f414d4f554e5453696c7665723a20494e53554646494349454e545f4c49515549444954595f4d494e54454453696c7665723a204d4554415f54584e535f414c52454144595f454e41424c454453696c7665723a20494e53554646494349454e545f494e5055545f414d4f554e5453696c7665723a204d4554415f54584e535f414c52454144595f44495341424c4544a264697066735822122032b50d4749a64df38ff1fe3b29ea9fa996c6711cc41550d1667b7fa7f7931df664736f6c634300060c003353696c7665723a204d4554415f54584e535f414c52454144595f454e41424c454453696c7665723a204d4554415f54584e535f414c52454144595f44495341424c4544a2646970667358221220148dc33244c962e83faffd3b0475f33b0c73b4f8362c5171d395ce0ca67a28b964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635e07d17b11610097578063b0cb33fe11610066578063b0cb33fe1461020f578063c9c6539614610235578063e6a4390514610263578063f46901ed14610291576100f5565b80635e07d17b146101955780636bd7c172146101bb5780637cd07e47146101e1578063a2e74af6146101e9576100f5565b806321dd70e6116100d357806321dd70e61461014357806323cf31181461014b578063574f2ba3146101735780635855a25a1461018d576100f5565b8063017e7e58146100fa578063094b74151461011e5780631e3dd18b14610126575b600080fd5b6101026102b7565b604080516001600160a01b039092168252519081900360200190f35b6101026102c6565b6101026004803603602081101561013c57600080fd5b50356102d5565b6101026102fc565b6101716004803603602081101561016157600080fd5b50356001600160a01b031661030b565b005b61017b610380565b60408051918252519081900360200190f35b61017b610386565b610171600480360360208110156101ab57600080fd5b50356001600160a01b0316610419565b610171600480360360208110156101d157600080fd5b50356001600160a01b03166105be565b61010261068e565b610171600480360360208110156101ff57600080fd5b50356001600160a01b031661069d565b6101716004803603602081101561022557600080fd5b50356001600160a01b0316610712565b6101026004803603604081101561024b57600080fd5b506001600160a01b038135811691602001351661089a565b6101026004803603604081101561027957600080fd5b506001600160a01b0381358116916020013516610bb9565b610171600480360360208110156102a757600080fd5b50356001600160a01b0316610bdf565b6000546001600160a01b031681565b6001546001600160a01b031681565b600581815481106102e257fe5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031681565b6001546001600160a01b0316331461035e576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60055490565b60405161039560208201610c54565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106103db5780518252601f1990920191602091820191016103bc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012081565b6001546001600160a01b0316331461046c576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b6001600160a01b0381166104c1576040805162461bcd60e51b815260206004820152601760248201527653696c7665723a20504149525f4e4f545f45584953545360481b604482015290519081900360640190fd5b6000819050806001600160a01b031663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ff57600080fd5b505afa158015610513573d6000803e3d6000fd5b505050506040513d602081101561052957600080fd5b5051156105675760405162461bcd60e51b81526004018080602001828103825260218152602001806135c46021913960400191505060405180910390fd5b806001600160a01b031663578bb42d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105a257600080fd5b505af11580156105b6573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314610611576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b6001600160a01b03811661066c576040805162461bcd60e51b815260206004820152601760248201527f53696c7665723a20494e56414c49445f41444452455353000000000000000000604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b6001546001600160a01b031633146106f0576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610765576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b6001600160a01b0381166107ba576040805162461bcd60e51b815260206004820152601760248201527653696c7665723a20504149525f4e4f545f45584953545360481b604482015290519081900360640190fd5b6000819050806001600160a01b031663a8c95dc06040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d602081101561082257600080fd5b505161085f5760405162461bcd60e51b81526004018080602001828103825260228152602001806135e56022913960400191505060405180910390fd5b806001600160a01b031663083836406040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105a257600080fd5b6000816001600160a01b0316836001600160a01b03161415610903576040805162461bcd60e51b815260206004820152601b60248201527f53696c7665723a204944454e544943414c5f4144445245535345530000000000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b031610610926578385610929565b84845b90925090506001600160a01b038216610980576040805162461bcd60e51b815260206004820152601460248201527353696c7665723a205a45524f5f4144445245535360601b604482015290519081900360640190fd5b6001600160a01b038281166000908152600460209081526040808320858516845290915290205416156109f0576040805162461bcd60e51b815260206004820152601360248201527253696c7665723a20504149525f45584953545360681b604482015290519081900360640190fd5b606060405180602001610a0290610c54565b6020820181038252601f19601f8201166040525090506000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001209050808251602084016000f59450846001600160a01b031663485cc95585856040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b6001546001600160a01b03163314610c32576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b61296280610c628339019056fe60806040526005805460ff60a01b191690556001600d5534801561002257600080fd5b50604080518082018252600f81526e29b4b63b32b9102628102a37b5b2b760891b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fa02e41f8622e57e975c7ec39e69a0fe667ce44e62d3126dc8994889e0c7ee5bc818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600680546001600160a01b031916331790556128488061011a6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80635a3d54931161010f578063a9059cbb116100a2578063d21220a711610071578063d21220a7146105ae578063d505accf146105b6578063dd62ed3e14610607578063fff6cae914610635576101e5565b8063a9059cbb1461054c578063ba9a7a5614610578578063bc25cf7714610580578063c45a0155146105a6576101e5565b80637ecebe00116100de5780637ecebe00146104d757806389afcb44146104fd57806395d89b411461053c578063a8c95dc014610544576101e5565b80635a3d54931461047b5780636a6278421461048357806370a08231146104a95780637464fc3d146104cf576101e5565b806323b872dd11610187578063485cc95511610156578063485cc95514610417578063572b6c0514610445578063578bb42d1461046b5780635909c0d514610473576101e5565b806323b872dd146103b357806330adf81f146103e9578063313ce567146103f15780633644e5151461040f576101e5565b80630902f1ac116101c35780630902f1ac146102fd578063095ea7b3146103355780630dfe16811461037557806318160ddd14610399576101e5565b8063022c0d9f146101ea57806306fdde031461027857806308383640146102f5575b600080fd5b6102766004803603608081101561020057600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561023757600080fd5b82018360208201111561024957600080fd5b8035906020019184600183028401116401000000008311171561026b57600080fd5b50909250905061063d565b005b610280610c60565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ba5781810151838201526020016102a2565b50505050905090810190601f1680156102e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610276610c8b565b610305610d82565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6103616004803603604081101561034b57600080fd5b506001600160a01b038135169060200135610dac565b604080519115158252519081900360200190f35b61037d610dca565b604080516001600160a01b039092168252519081900360200190f35b6103a1610dd9565b60408051918252519081900360200190f35b610361600480360360608110156103c957600080fd5b506001600160a01b03813581169160208101359091169060400135610ddf565b6103a1610ec2565b6103f9610ee6565b6040805160ff9092168252519081900360200190f35b6103a1610eeb565b6102766004803603604081101561042d57600080fd5b506001600160a01b0381358116916020013516610ef1565b6103616004803603602081101561045b57600080fd5b50356001600160a01b0316610f72565b610276610fa3565b6103a16110a1565b6103a16110a7565b6103a16004803603602081101561049957600080fd5b50356001600160a01b03166110ad565b6103a1600480360360208110156104bf57600080fd5b50356001600160a01b031661154c565b6103a161155e565b6103a1600480360360208110156104ed57600080fd5b50356001600160a01b0316611564565b6105236004803603602081101561051357600080fd5b50356001600160a01b0316611576565b6040805192835260208301919091528051918290030190f35b610280611919565b610361611938565b6103616004803603604081101561056257600080fd5b506001600160a01b038135169060200135611948565b6103a161195c565b6102766004803603602081101561059657600080fd5b50356001600160a01b0316611962565b61037d611ad1565b61037d611ae0565b610276600480360360e08110156105cc57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611aef565b6103a16004803603604081101561061d57600080fd5b506001600160a01b0381358116916020013516611cee565b610276611d0b565b600d54600114610685576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55841515806106985750600084115b6106d35760405162461bcd60e51b81526004018080602001828103825260228152602001806127686022913960400191505060405180910390fd5b6106db6126f3565b6040518060e0016040528060006001600160701b0316815260200160006001600160701b031681526020016000815260200160008152602001600081526020016000815260200160008152509050610731610d82565b506001600160701b0390811660208401521680825286108015610760575080602001516001600160701b031685105b6107b1576040805162461bcd60e51b815260206004820152601e60248201527f53696c7665723a20494e53554646494349454e545f4c49515549444954590000604482015290519081900360640190fd5b601960c08201526007546008546001600160a01b039182169190811690861682148015906107f15750806001600160a01b0316866001600160a01b031614155b610837576040805162461bcd60e51b815260206004820152601260248201527153696c7665723a20494e56414c49445f544f60701b604482015290519081900360640190fd5b87156108485761084882878a611e6a565b861561085957610859818789611e6a565b831561091257856001600160a01b03166310d1e85c610876612004565b8a8a89896040518663ffffffff1660e01b815260040180866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b505050505b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b505160408085019190915280516370a0823160e01b815230600482015290516001600160a01b038316916370a08231916024808301926020929190829003018186803b1580156109d157600080fd5b505afa1580156109e5573d6000803e3d6000fd5b505050506040513d60208110156109fb57600080fd5b505160608401525050805160408201516001600160701b0390911687900310610a25576000610a3c565b8581600001516001600160701b0316038160400151035b8160800181815250508481602001516001600160701b031603816060015111610a66576000610a7d565b8481602001516001600160701b0316038160600151035b60a08201526080810151151580610a98575060008160a00151115b610ad35760405162461bcd60e51b81526004018080602001828103825260218152602001806127d06021913960400191505060405180910390fd5b6000610b0a610af38360c00151846080015161202990919063ffffffff16565b6040840151610b0490612710612029565b9061208c565b90506000610b3d610b2c8460c001518560a0015161202990919063ffffffff16565b6060850151610b0490612710612029565b9050610b7a6305f5e100610b7485602001516001600160701b031686600001516001600160701b031661202990919063ffffffff16565b90612029565b610b848383612029565b1015610bc3576040805162461bcd60e51b815260206004820152600960248201526853696c7665723a204b60b81b604482015290519081900360640190fd5b5050610be181604001518260600151836000015184602001516120dc565b836001600160a01b0316610bf3612004565b6001600160a01b03167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82283608001518460a001518a8a6040518085815260200184815260200183815260200182815260200194505050505060405180910390a350506001600d5550505050565b6040518060400160405280600f81526020016e29b4b63b32b9102628102a37b5b2b760891b81525081565b6006546001600160a01b0316610c9f612004565b6001600160a01b031614610cee576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600554600160a01b900460ff16610d365760405162461bcd60e51b81526004018080602001828103825260228152602001806127f16022913960400191505060405180910390fd5b6005805460ff60a01b19169055610d4b612004565b6001600160a01b03167f096be170ccc67847e55535e7d8334b2afedd95805baedc160005addb9144745060405160405180910390a2565b6009546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610dc0610db9612004565b8484612298565b5060015b92915050565b6007546001600160a01b031681565b60005481565b6001600160a01b03831660009081526002602052604081206000199082610e04612004565b6001600160a01b03166001600160a01b031681526020019081526020016000205414610ead576001600160a01b0384166000908152600260205260408120610e7191849190610e51612004565b6001600160a01b031681526020810191909152604001600020549061208c565b6001600160a01b038516600090815260026020526040812090610e92612004565b6001600160a01b031681526020810191909152604001600020555b610eb88484846122fa565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60035481565b6006546001600160a01b03163314610f44576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055565b600554600090600160a01b900460ff168015610f9b57506005546001600160a01b038381169116145b90505b919050565b6006546001600160a01b0316610fb7612004565b6001600160a01b031614611006576040805162461bcd60e51b815260206004820152601160248201527029b4b63b32b91d102327a92124a22222a760791b604482015290519081900360640190fd5b600554600160a01b900460ff161561104f5760405162461bcd60e51b81526004018080602001828103825260218152602001806127af6021913960400191505060405180910390fd5b6005805460ff60a01b1916600160a01b17905561106a612004565b6001600160a01b03167f92e4c08d47b71e8dc051232b8e475ec296489a67a4ba5cca88ff20fb6ac499e660405160405180910390a2565b600a5481565b600b5481565b6000600d546001146110f7576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d81905580611107610d82565b50600754604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561115b57600080fd5b505afa15801561116f573d6000803e3d6000fd5b505050506040513d602081101561118557600080fd5b5051600854604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156111d857600080fd5b505afa1580156111ec573d6000803e3d6000fd5b505050506040513d602081101561120257600080fd5b50519050600061121b836001600160701b03871661208c565b90506000611232836001600160701b03871661208c565b9050600061124087876123a8565b600054909150806114275760065460408051637cd07e4760e01b815290516000926001600160a01b031691637cd07e47916004808301926020929190829003018186803b15801561129057600080fd5b505afa1580156112a4573d6000803e3d6000fd5b505050506040513d60208110156112ba57600080fd5b505190506001600160a01b0381166112d0612004565b6001600160a01b031614156113a557806001600160a01b03166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561131857600080fd5b505afa15801561132c573d6000803e3d6000fd5b505050506040513d602081101561134257600080fd5b50519950891580159061135757506000198a14155b6113a0576040805162461bcd60e51b81526020600482015260156024820152744261642064657369726564206c697175696469747960581b604482015290519081900360640190fd5b611421565b6001600160a01b038116156113fa576040805162461bcd60e51b815260206004820152601660248201527526bab9ba103737ba103430bb329036b4b3b930ba37b960511b604482015290519081900360640190fd5b6114126103e8610b0461140d8888612029565b6124e8565b995061142160006103e8612539565b5061146a565b6114676001600160701b03891661143e8684612029565b8161144557fe5b046001600160701b03891661145a8685612029565b8161146157fe5b046125c3565b98505b600089116114a95760405162461bcd60e51b815260040180806020018281038252602581526020018061278a6025913960400191505060405180910390fd5b6114b38a8a612539565b6114bf86868a8a6120dc565b81156114e9576009546114e5906001600160701b0380821691600160701b900416612029565b600c555b6114f1612004565b6001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8585604051808381526020018281526020019250505060405180910390a250506001600d5550949695505050505050565b60016020526000908152604090205481565b600c5481565b60046020526000908152604090205481565b600080600d546001146115c1576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d819055806115d1610d82565b50600754600854604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b15801561162d57600080fd5b505afa158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b1580156116a557600080fd5b505afa1580156116b9573d6000803e3d6000fd5b505050506040513d60208110156116cf57600080fd5b5051306000908152600160205260408120549192506116ee88886123a8565b600054909150806116ff8487612029565b8161170657fe5b049a50806117148486612029565b8161171b57fe5b04995060008b11801561172e575060008a115b6117695760405162461bcd60e51b81526004018080602001828103825260258152602001806127436025913960400191505060405180910390fd5b61177330846125db565b61177e878d8d611e6a565b611789868d8c611e6a565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b1580156117cf57600080fd5b505afa1580156117e3573d6000803e3d6000fd5b505050506040513d60208110156117f957600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b15801561184557600080fd5b505afa158015611859573d6000803e3d6000fd5b505050506040513d602081101561186f57600080fd5b5051935061187f85858b8b6120dc565b81156118a9576009546118a5906001600160701b0380821691600160701b900416612029565b600c555b8b6001600160a01b03166118bb612004565b6001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051808381526020018281526020019250505060405180910390a35050505050505050506001600d81905550915091565b604051806040016040528060038152602001620534c560ec1b81525081565b600554600160a01b900460ff1681565b6000610dc0611955612004565b84846122fa565b6103e881565b600d546001146119aa576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600754600854600954604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611a539285928792611a4e926001600160701b03169185916370a0823191602480820192602092909190829003018186803b158015611a1c57600080fd5b505afa158015611a30573d6000803e3d6000fd5b505050506040513d6020811015611a4657600080fd5b50519061208c565b611e6a565b611ac78184611a4e6009600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a1c57600080fd5b50506001600d5550565b6006546001600160a01b031681565b6008546001600160a01b031681565b42841015611b36576040805162461bcd60e51b815260206004820152600f60248201526e14da5b1d995c8e8811561412549151608a1b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015611c51573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590611c875750886001600160a01b0316816001600160a01b0316145b611cd8576040805162461bcd60e51b815260206004820152601960248201527f53696c7665723a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b611ce3898989612298565b505050505050505050565b600260209081526000928352604080842090915290825290205481565b600d54600114611d53576040805162461bcd60e51b815260206004820152600e60248201526d14da5b1d995c8e881313d0d2d15160921b604482015290519081900360640190fd5b6000600d55600754604080516370a0823160e01b81523060048201529051611e63926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d6020811015611dce57600080fd5b5051600854604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611e1b57600080fd5b505afa158015611e2f573d6000803e3d6000fd5b505050506040513d6020811015611e4557600080fd5b50516009546001600160701b0380821691600160701b9004166120dc565b6001600d55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b60208310611f175780518252601f199092019160209182019101611ef8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f79576040519150601f19603f3d011682016040523d82523d6000602084013e611f7e565b606091505b5091509150818015611fac575080511580611fac5750808060200190516020811015611fa957600080fd5b50515b611ffd576040805162461bcd60e51b815260206004820152601760248201527f53696c7665723a205452414e534645525f4641494c4544000000000000000000604482015290519081900360640190fd5b5050505050565b600061200f33610f72565b15612023575060131936013560601c612026565b50335b90565b60008115806120445750508082028282828161204157fe5b04145b610dc4576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115610dc4576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160701b0384118015906120fa57506001600160701b038311155b61213e576040805162461bcd60e51b815260206004820152601060248201526f53696c7665723a204f564552464c4f5760801b604482015290519081900360640190fd5b60095463ffffffff42811691600160e01b9004811682039081161580159061216e57506001600160701b03841615155b801561218257506001600160701b03831615155b156121ed578063ffffffff166121aa8561219b8661266d565b6001600160e01b03169061267f565b600a80546001600160e01b03929092169290920201905563ffffffff81166121d58461219b8761266d565b600b80546001600160e01b0392909216929092020190555b600980546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b8883168102919091176001600160e01b0316600160e01b63ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831660009081526001602052604090205461231d908261208c565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461234c90826126a4565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b1580156123f957600080fd5b505afa15801561240d573d6000803e3d6000fd5b505050506040513d602081101561242357600080fd5b5051600c546001600160a01b0382161580159450919250906124d45780156124cf57600061246061140d6001600160701b03888116908816612029565b9050600061246d836124e8565b9050808211156124cc57600061248f612486848461208c565b60005490612029565b905060006124a8836124a2866005612029565b906126a4565b905060008183816124b557fe5b04905080156124c8576124c88782612539565b5050505b50505b6124e0565b80156124e0576000600c555b505092915050565b6000600382111561252b575080600160028204015b818110156125255780915060028182858161251457fe5b04018161251d57fe5b0490506124fd565b50610f9e565b8115610f9e57506001919050565b60005461254690826126a4565b60009081556001600160a01b03831681526001602052604090205461256b90826126a4565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008183106125d257816125d4565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546125fe908261208c565b6001600160a01b03831660009081526001602052604081209190915554612625908261208c565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161269c57fe5b049392505050565b80820182811015610dc4576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b6040518060e0016040528060006001600160701b0316815260200160006001600160701b031681526020016000815260200160008152602001600081526020016000815260200160008152509056fe53696c7665723a20494e53554646494349454e545f4c49515549444954595f4255524e454453696c7665723a20494e53554646494349454e545f4f55545055545f414d4f554e5453696c7665723a20494e53554646494349454e545f4c49515549444954595f4d494e54454453696c7665723a204d4554415f54584e535f414c52454144595f454e41424c454453696c7665723a20494e53554646494349454e545f494e5055545f414d4f554e5453696c7665723a204d4554415f54584e535f414c52454144595f44495341424c4544a264697066735822122032b50d4749a64df38ff1fe3b29ea9fa996c6711cc41550d1667b7fa7f7931df664736f6c634300060c003353696c7665723a204d4554415f54584e535f414c52454144595f454e41424c454453696c7665723a204d4554415f54584e535f414c52454144595f44495341424c4544a2646970667358221220148dc33244c962e83faffd3b0475f33b0c73b4f8362c5171d395ce0ca67a28b964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 477,
        "contract": "contracts/uniswapv2/SilverFactory.sol:SilverFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 480,
        "contract": "contracts/uniswapv2/SilverFactory.sol:SilverFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 483,
        "contract": "contracts/uniswapv2/SilverFactory.sol:SilverFactory",
        "label": "migrator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 486,
        "contract": "contracts/uniswapv2/SilverFactory.sol:SilverFactory",
        "label": "auro",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 493,
        "contract": "contracts/uniswapv2/SilverFactory.sol:SilverFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 497,
        "contract": "contracts/uniswapv2/SilverFactory.sol:SilverFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}